import jenkins.model.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*

def jenkins = Jenkins.instance
def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

def credentials = []

store.getDomains().each { domain ->
    store.getCredentials(domain).each { credential ->
        def credentialData = [:]
        credentialData['id'] = credential.id
        credentialData['description'] = credential.description
        credentialData['type'] = credential.getClass().getName()
        if (credential instanceof com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl) {
            credentialData['username'] = credential.username
            credentialData['password'] = credential.password.getPlainText()
        } else if (credential instanceof com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey) {
            credentialData['username'] = credential.username
            credentialData['privateKey'] = credential.privateKey
            credentialData['passphrase'] = credential.passphrase.getPlainText()
        } else if (credential instanceof org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl) {
            credentialData['secret'] = credential.secret.getPlainText()
        } else if (credential instanceof org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl) {
            credentialData['fileName'] = credential.fileName
            credentialData['fileContent'] = new String(credential.content)
        }
        credentials.add(credentialData)
    }
}

return credentials

/***************/

import jenkins.model.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
import org.jenkinsci.plugins.plaincredentials.impl.*
import org.jenkinsci.plugins.plaincredentials.FileCredentials

def credentialsData = [
    // Replace with the actual output from the first script
]

def jenkins = Jenkins.instance
def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
def domain = Domain.global()

credentialsData.each { data ->
    def credential
    switch (data.type) {
        case 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl':
            credential = new UsernamePasswordCredentialsImpl(
                CredentialsScope.GLOBAL,
                data.id,
                data.description,
                data.username,
                data.password
            )
            break
        case 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey':
            credential = new BasicSSHUserPrivateKey(
                CredentialsScope.GLOBAL,
                data.id,
                data.description,
                data.username,
                new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(data.privateKey),
                data.passphrase
            )
            break
        case 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl':
            credential = new StringCredentialsImpl(
                CredentialsScope.GLOBAL,
                data.id,
                data.description,
                Secret.fromString(data.secret)
            )
            break
        case 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl':
            credential = new FileCredentialsImpl(
                CredentialsScope.GLOBAL,
                data.id,
                data.description,
                data.fileName,
                data.fileContent.bytes
            )
            break
    }
    store.addCredentials(domain, credential)
}

jenkins.save()

/******************/

import jenkins.model.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*

def jenkins = Jenkins.instance
def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

// Retrieve all credentials
def credentials = store.getCredentials(Domain.global())

// Remove each credential
credentials.each { credential ->
    store.removeCredentials(Domain.global(), credential)
}

// Save the Jenkins instance to apply changes
jenkins.save()

println "All credentials have been deleted."
