import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
import org.jenkinsci.plugins.plaincredentials.impl.*
import org.jenkinsci.plugins.awscredentials.*
import jenkins.model.*
import hudson.util.Secret
import java.io.ByteArrayInputStream

def domain = Domain.global()
def store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

// List of Username/Password credentials
def usernamePasswordCredentialsList = [
    [username: "user1", password: "pass1", description: "First Credential", credentialId: "cred-id-1"],
    [username: "user2", password: "pass2", description: "Second Credential", credentialId: "cred-id-2"]
]

// List of Secret Text credentials
def secretTextCredentialsList = [
    [secret: "secret1", description: "First Secret Text Credential", credentialId: "secret-id-3"],
    [secret: "secret2", description: "Second Secret Text Credential", credentialId: "secret-id-4"]
]

// List of SSH Username with Private Key credentials
def sshCredentialsList = [
    [username: "sshuser1", privateKey: "private-key-content-1", description: "First SSH Credential", credentialId: "ssh-id-1"],
    [username: "sshuser2", privateKey: "private-key-content-2", description: "Second SSH Credential", credentialId: "ssh-id-2"]
]

// List of Certificate credentials
def certificateCredentialsList = [
    [certificate: "certificate-content-1", password: "cert-pass-1", description: "First Certificate Credential", credentialId: "cert-id-1"],
    [certificate: "certificate-content-2", password: "cert-pass-2", description: "Second Certificate Credential", credentialId: "cert-id-2"]
]

// List of Secret File credentials
def secretFileCredentialsList = [
    [fileName: "secret-file-1.txt", fileContent: "file-content-1", description: "First Secret File Credential", credentialId: "file-id-1"],
    [fileName: "secret-file-2.txt", fileContent: "file-content-2", description: "Second Secret File Credential", credentialId: "file-id-2"]
]

// List of AWS Access Key credentials
def awsCredentialsList = [
    [accessKey: "AWS_ACCESS_KEY_1", secretKey: "AWS_SECRET_KEY_1", description: "First AWS Credential", credentialId: "aws-id-1"],
    [accessKey: "AWS_ACCESS_KEY_2", secretKey: "AWS_SECRET_KEY_2", description: "Second AWS Credential", credentialId: "aws-id-2"]
]

// List of API Token credentials
def apiTokenCredentialsList = [
    [apiToken: "api-token-1", description: "First API Token Credential", credentialId: "api-token-id-1"],
    [apiToken: "api-token-2", description: "Second API Token Credential", credentialId: "api-token-id-2"]
]

// List of Tenant ID credentials
def tenantIdCredentialsList = [
    [tenantId: "tenant-id-1", description: "First Tenant ID Credential", credentialId: "tenant-id-1"],
    [tenantId: "tenant-id-2", description: "Second Tenant ID Credential", credentialId: "tenant-id-2"]
]

// List of Passphrase credentials
def passphraseCredentialsList = [
    [passphrase: "passphrase-1", description: "First Passphrase Credential", credentialId: "passphrase-id-1"],
    [passphrase: "passphrase-2", description: "Second Passphrase Credential", credentialId: "passphrase-id-2"]
]

// List of Client Secret credentials
def clientSecretCredentialsList = [
    [clientSecret: "client-secret-1", description: "First Client Secret Credential", credentialId: "client-secret-id-1"],
    [clientSecret: "client-secret-2", description: "Second Client Secret Credential", credentialId: "client-secret-id-2"]
]

// List of Plain Client Secret credentials
def plainClientSecretCredentialsList = [
    [plainClientSecret: "plain-client-secret-1", description: "First Plain Client Secret Credential", credentialId: "plain-client-secret-id-1"],
    [plainClientSecret: "plain-client-secret-2", description: "Second Plain Client Secret Credential", credentialId: "plain-client-secret-id-2"]
]

// List of Subscription ID credentials
def subscriptionIdCredentialsList = [
    [subscriptionId: "subscription-id-1", description: "First Subscription ID Credential", credentialId: "subscription-id-1"],
    [subscriptionId: "subscription-id-2", description: "Second Subscription ID Credential", credentialId: "subscription-id-2"]
]

// Add Username/Password credentials
usernamePasswordCredentialsList.each { cred ->
    def existingCredential = store.getCredentials(domain).find {
        it.id == cred.credentialId
    }

    if (existingCredential == null) {
        def credentials = new UsernamePasswordCredentialsImpl(
            CredentialsScope.GLOBAL, 
            cred.credentialId, 
            cred.description, 
            cred.username, 
            cred.password
        )
        store.addCredentials(domain, credentials)
        println "Username/Password Credential added with ID: ${cred.credentialId}"
    } else {
        println "Username/Password Credential with ID: ${cred.credentialId} already exists"
    }
}

// Add Secret Text credentials
secretTextCredentialsList.each { cred ->
    def existingCredential = store.getCredentials(domain).find {
        it.id == cred.credentialId
    }

    if (existingCredential == null) {
        def credentials = new StringCredentialsImpl(
            CredentialsScope.GLOBAL,
            cred.credentialId,
            cred.description,
            Secret.fromString(cred.secret)
        )
        store.addCredentials(domain, credentials)
        println "Secret Text Credential added with ID: ${cred.credentialId}"
    } else {
        println "Secret Text Credential with ID: ${cred.credentialId} already exists"
    }
}

// Add SSH Username with Private Key credentials
sshCredentialsList.each { cred ->
    def existingCredential = store.getCredentials(domain).find {
        it.id == cred.credentialId
    }

    if (existingCredential == null) {
        def privateKeySource = new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(cred.privateKey)
        def credentials = new BasicSSHUserPrivateKey(
            CredentialsScope.GLOBAL,
            cred.credentialId,
            cred.username,
            privateKeySource,
            null, // passphrase
            cred.description
        )
        store.addCredentials(domain, credentials)
        println "SSH Username with Private Key Credential added with ID: ${cred.credentialId}"
    } else {
        println "SSH Username with Private Key Credential with ID: ${cred.credentialId} already exists"
    }
}

// Add Certificate credentials
certificateCredentialsList.each { cred ->
    def existingCredential = store.getCredentials(domain).find {
        it.id == cred.credentialId
    }

    if (existingCredential == null) {
        def certificateBytes = cred.certificate.getBytes()
        def credentials = new CertificateCredentialsImpl(
            CredentialsScope.GLOBAL,
            cred.credentialId,
            cred.description,
            cred.password,
            new CertificateCredentialsImpl.UploadedKeyStoreSource(certificateBytes)
        )
        store.addCredentials(domain, credentials)
        println "Certificate Credential added with ID: ${cred.credentialId}"
    } else {
        println "Certificate Credential with ID: ${cred.credentialId} already exists"
    }
}

// Add Secret File credentials
secretFileCredentialsList.each { cred ->
    def existingCredential = store.getCredentials(domain).find {
        it.id == cred.credentialId
    }

    if (existingCredential == null) {
        def fileBytes = cred.fileContent.getBytes()
        def credentials = new FileCredentialsImpl(
            CredentialsScope.GLOBAL,
            cred.credentialId,
            cred.description,
            cred.fileName,
            new ByteArrayInputStream(fileBytes)
        )
        store.addCredentials(domain, credentials)
        println "Secret File Credential added with ID: ${cred.credentialId}"
    } else {
        println "Secret File Credential with ID: ${cred.credentialId} already exists"
    }
}

// Add AWS Access Key credentials
awsCredentialsList.each { cred ->
    def existingCredential = store.getCredentials(domain).find {
        it.id == cred.credentialId
    }

    if (existingCredential == null) {
        def credentials = new AWSCredentialsImpl(
            CredentialsScope.GLOBAL,
            cred.credentialId,
            cred.accessKey,
            Secret.fromString(cred.secretKey),
            cred.description
        )
        store.addCredentials(domain, credentials)
        println "AWS Access Key Credential added with ID: ${cred.credentialId}"
    } else {
        println "AWS Access Key Credential with ID: ${cred.credentialId} already exists"
    }
}

// Add API Token credentials
apiTokenCredentialsList.each { cred ->
    def existingCredential = store.getCredentials(domain).find {
        it.id == cred.credentialId
    }

    if (existingCredential == null) {
        def credentials = new StringCredentialsImpl(
            CredentialsScope.GLOBAL,
            cred.credentialId,
            cred.description,
           
